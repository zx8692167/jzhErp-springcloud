
server:
  port: 9995

spring:
  application:
    name: cloud-consumer-hystrix-payment
  datasource:
      driver-class-name: com.mysql.jdbc.Driver
#      url: jdbc:mysql://47.94.103.129:3306/jzh_erp?useUnicode=true&characterEncoding=utf8&useCursorFetch=true&defaultFetchSize=500&allowMultiQueries=true&rewriteBatchedStatements=true&useSSL=false&serverTimezone=GMT%2B8
      url: jdbc:mysql://127.0.0.1:3306/jzh_erp?useUnicode=true&characterEncoding=utf8&useCursorFetch=true&defaultFetchSize=500&allowMultiQueries=true&rewriteBatchedStatements=true&useSSL=false&serverTimezone=GMT%2B8

      username: jzh
      password: Root@123456
  data:
    redis:
      #host: 47.94.103.129
      host: 127.0.0.1
      #spring.redis.host=127.0.0.1
      #spring.data.redis.host=192.168.230.128
      port: 6379

  main:
    allow-bean-definition-overriding: true

mybatis-plus:
  mapper-locations: classpath:./mapper_xml/*.xml




eureka:
  client:
    register-with-eureka: true
    fetch-registry: true
    service-url:
        defaultZone: http://127.0.0.1:8080/eureka/
      #defaultZone: http://47.94.103.129:8080/eureka/
    #  defaultZone: http://192.168.10.140:8080/eureka/
feign:
  hystrix:
    enabled: true
  httpclient:
    enabled: true
  okhttp:
    enabled: true
#  client:
#    config:
#      default:
#        loggerLevel: full

springdoc:
  packages-to-scan: ##需要扫描的包,可以配置多个
    - com.jzh.hystrix.consumer.controller
  paths-to-exclude:  ##配置不包含在swagger文档中的api
    - /api/test/**
    - /api/mockito/data
  swagger-ui:
    enabled: true  #开启/禁止swagger,prod可以设置为false
    #  path: /swagger-ui.html  #swagger页面
    path: /doc.html
  api-docs:
    enabled: true #开启/禁止api-docs, prod可以设置为false
    path: /api-docs #api的json文档
  use-management-port: false



seata:
  application-id: cloud-consumer-hystrix-payment
  tx-service-group: my_erp_tx_group
  service:
    vgroup-mapping:
      # 此处配置对应Server端配置registry.eureka.application的值
      my_erp_tx_group: jzh-erp-seata
  registry:
    type: eureka
    eureka:
      service-url: http://localhost:8080/eureka
      weight: 1

#seata:
#  enabled: true
#  application-id: applicationName
#  tx-service-group: default_tx_group
#  access-key: aliyunAccessKey
#  secret-key: aliyunSecretKey
#  enable-auto-data-source-proxy: true
#  data-source-proxy-mode: AT
#  use-jdk-proxy: false
#  scan-packages: firstPackage,secondPackage
#  excludes-for-scanning: firstBeanNameForExclude,secondBeanNameForExclude
##  excludes-for-auto-proxying: firstClassNameForExclude,secondClassNameForExclude
#  client:
#    rm:
#      async-commit-buffer-limit: 10000
#      report-retry-count: 5
#      table-meta-check-enable: false
#      report-success-enable: false
#      saga-branch-register-enable: false
#      saga-json-parser: fastjson
#      saga-retry-persist-mode-update: false
#      saga-compensate-persist-mode-update: false
#      tcc-action-interceptor-order: -2147482648 #Ordered.HIGHEST_PRECEDENCE + 1000
#      sql-parser-type: druid
#      lock:
#        retry-interval: 10
#        retry-times: 30
#        retry-policy-branch-rollback-on-conflict: true
#    tm:
#      commit-retry-count: 5
#      rollback-retry-count: 5
#      default-global-transaction-timeout: 60000
#      degrade-check: false
#      degrade-check-period: 2000
#      degrade-check-allow-times: 10
#      interceptor-order: -2147482648 #Ordered.HIGHEST_PRECEDENCE + 1000
#    undo:
#      data-validation: true
#      log-serialization: jackson
#      log-table: undo_log
#      only-care-update-columns: true
#      compress:
#        enable: true
#        type: zip
#        threshold: 64k
#    load-balance:
#      type: XID
#      virtual-nodes: 10
#  service:
#    vgroup-mapping:
#      default_tx_group: default
#    grouplist:
#      default: 127.0.0.1:8091
#    enable-degrade: false
#    disable-global-transaction: false
#  transport:
#    shutdown:
#      wait: 3
#    thread-factory:
#      boss-thread-prefix: NettyBoss
#      worker-thread-prefix: NettyServerNIOWorker
#      server-executor-thread-prefix: NettyServerBizHandler
#      share-boss-worker: false
#      client-selector-thread-prefix: NettyClientSelector
#      client-selector-thread-size: 1
#      client-worker-thread-prefix: NettyClientWorkerThread
#      worker-thread-size: default
#      boss-thread-size: 1
#    type: TCP
#    server: NIO
#    heartbeat: true
#    serialization: seata
#    compressor: none
#    enable-tm-client-batch-send-request: false
#    enable-rm-client-batch-send-request: true
#    rpc-rm-request-timeout: 15000
#    rpc-tm-request-timeout: 30000
##  config:
##    type: file
##    consul:
##      server-addr: 127.0.0.1:8500
##    apollo:
##      apollo-meta: http://192.168.1.204:8801
##      app-id: seata-server
##      namespace: application
##      apollo-accesskey-secret:
##      cluster:
##    etcd3:
##      server-addr: http://localhost:2379
##    nacos:
##      namespace:
##      server-addr: 127.0.0.1:8848
##      group: SEATA_GROUP
##      username:
##      password:
##      context-path:
##      ##if use MSE Nacos with auth, mutex with username/password attribute
##      #access-key:
##      #secret-key:
##      data-id: seata.properties
##    zk:
##      server-addr: 127.0.0.1:2181
##      session-timeout: 6000
##      connect-timeout: 2000
##      username:
##      password:
##      node-path: /seata/seata.properties
##    custom:
##      name:
#  registry:
#    #type: file
#    type: eureka
##    raft:
##      server-addr:
##      metadata-max-age-ms: 30000
##    file:
##      name: file.conf
##    consul:
##      server-addr: 127.0.0.1:8500
##      acl-token:
##    etcd3:
##      server-addr: http://localhost:2379
#    eureka:
#      weight: 1
#      service-url: http://localhost:8080/eureka
##    nacos:
##      application: seata-server
##      server-addr: 127.0.0.1:8848
##      group : "SEATA_GROUP"
##      namespace:
##      username:
##      password:
##      context-path:
##      client-application: ${spring.application.name}
##      ##if use MSE Nacos with auth, mutex with username/password attribute
##      #access-key:
##      #secret-key:
##      ##if use Nacos naming meta-data for SLB service registry, specify nacos address pattern rules here
##      #slbPattern =
##    redis:
##      server-addr: localhost:6379
##      db: 0
##      password:
##      timeout: 0
##    sofa:
##      server-addr: 127.0.0.1:9603
##      region: DEFAULT_ZONE
##      datacenter: DefaultDataCenter
##      group: SEATA_GROUP
##      address-wait-time: 3000
##      application: default
##    zk:
##      server-addr: 127.0.0.1:2181
##      session-timeout: 6000
##      connect-timeout: 2000
##      username:
##      password:
##    custom:
##      name:
#  log:
#    exception-rate: 100
#  tcc:
#    fence:
#      log-table-name: tcc_fence_log
#      clean-period: 1h
#    # You can choose from the following options: fastjson, jackson, gson
#    context-json-parser-type: fastjson
#  saga:
#    enabled: false
#    state-machine:
#      table-prefix: seata_
#      enable-async: false
#      async-thread-pool:
#        core-pool-size: 1
#        max-pool-size: 20
#        keep-alive-time: 60
#      trans-operation-timeout: 1800000
#      service-invoke-timeout: 300000
#      auto-register-resources: true
#      resources:
#        - classpath*:seata/saga/statelang/**/*.json
#      default-tenant-id: 000001
#      charset: UTF-8